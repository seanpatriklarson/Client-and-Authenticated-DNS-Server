Created by Sean Larson

Description of the programs:
Client Socket:
First the client creates a socket to connect to the as server.
The as server accepts the client's connection, and creates two additional sockets in order to connect to ts1 and ts2.
After establishing all of the necessary connections with ts1 and ts2, the client begins sending line of input from the designated file and waits for as to respond.
When the client begins sending data of the form ("foxtroxt", hexdigest) to the as server

Authentication Server Socket:
The as server takes the challenge ("foxtrot", hexdigest) and sends it to both ts1 and ts2.
ts1 and ts2 responsd to the challenge by using their own respective keys combined with the challenge word (i.e. foxtrot) to generate a hexdigest that is then sent back to as.
The as server then compares the two hexdigests that have been generated by ts1 and ts2 and notifies the client as to which server the key belonged to

TS1 and TS2 DNS Servers:
The client then connects to either ts1 or ts2 based on the comparison done by as, and contacts that server with the appropriate query from the list of hostnames
If the requested hostname is found at ts1's table of hosts, then it is returned back to the client or if not found returns ERROR accordingly and writes to the file 'RESOLVED.txt'
If the requested hostname is found at ts2's table of hosts, then it is returned back to the client or if not found returns ERROR accordingly and writes to the file 'RESOLVED.txt'

For this project I learned how to create an authenticated DNS server, where an encrypted connection is established after a handshake style agreement between the client and authentication server.
I was able to work with one of the libararies hmac which allows us to easily encrypt a message using plaintext.
Overall, I feel that this project has helped me become very comfortable with using python, especially when used in a persistent client to server connection, which is an invaluable tool for any programmer.
